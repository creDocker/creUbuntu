import pika
import requests
from requests.auth import HTTPBasicAuth

#Current Container Name : {{ $CurrentContainer.Name }}

def getPikaParameters():
    mqUser = False
    {{ if $CurrentContainer.Env.RABBITMQ_USER }}
    mqUser = '{{ $CurrentContainer.Env.RABBITMQ_USER }}'
    {{ end }}
    mqPassword = False
    {{ if $CurrentContainer.Env.RABBITMQ_PWD }}
    mqPassword = '{{ $CurrentContainer.Env.RABBITMQ_PWD }}'
    {{ end }}
    credentials = False
    if(mqUser and mqPassword):
        credentials = pika.credentials.PlainCredentials(mqUser, mqPassword, erase_on_connect=False)
    else:
        print('ATTENTION: RabbitMQ credentials not set.')  


    mqPort = 5672
    mqIp = False
    {{ range $rabbitPWD, $containers := groupByMulti $ "Env.RABBITMQ_ROOT_PWD" "," }}
         {{ range $index, $container := $containers }}
             {{ range $containerNetwork := $container.Networks }}
    mqIp = '{{ $containerNetwork.IP }}';
             {{ end }}
        {{ end }}
    {{ end }} 

    parameters = False
    if(credentials and mqIp and mqPort):
        parameters = pika.ConnectionParameters(mqIp, mqPort, '/', credentials)
    return parameters

def getPikaQueues():
    queues = []
    {{ range $queueNameS := split $CurrentContainer.Env.RABBITMQ_QUEUE "," }} 
    queues.append('{{ $queueNameS }}') 
    {{ end }}
    return queues

def getQueueLength(queueName):
    mqPort = 15672
    mqIp = False
    mqRootPW = ''
    queueLength = -1
    {{ range $rabbitPWD, $containers := groupByMulti $ "Env.RABBITMQ_ROOT_PWD" "," }}
         {{ range $index, $container := $containers }}
             {{ range $containerNetwork := $container.Networks }}
    mqIp = '{{ $containerNetwork.IP }}';
    mqRootPW = '{{ $rabbitPWD }}'
             {{ end }}
        {{ end }}
    {{ end }} 
    if(mqRootPW and mqIp and mqPort):
        url = 'http://' + mqIp + ':' + str(mqPort) + '/api/queues/%2F/'+queueName
        data = requests.get(url, auth=HTTPBasicAuth('admin', mqRootPW))
        if(data.status_code == 200):
          queueLength = 0
          json = data.json()
          if('messages' in json):
            queueLength = json['messages']
    return queueLength    


