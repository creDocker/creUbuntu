#
# Ubuntu Dockerfile
#
# https://github.com/tamboraorg/docker/creUbuntu
# (adapted from https://github.com/dockerfile/ubuntu )

# Pull base image.
FROM ubuntu:20.04 
MAINTAINER Michael Kahle <michael.kahle@yahoo.de>

ARG BUILD_YEAR=2020
ARG BUILD_MONTH=0
ARG BUILD_TAG=latest

# version: yyyy.n for stable versions 
#          0.yyyy for development - tagged automatically if base functionality is working 
ENV CRE_VERSION 2020.0 
ENV UBUNTU_VERSION 20.04
ENV OPENSSL_VERSION 1.1.1f
#8 needed for spark nlp ? 13
ENV JAVA_VERSION 11
# open
ENV JAVA_FAMILY tem 
#ENV NODE_VERSION 12.16.1 use  creNode...
ENV PYTHON_VERSION 3.8  

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8
ENV LC_CTYPE en_US.UTF-8
ENV LC_ALL en_US.UTF-8
ENV TZ=UTC
ENV TERM xterm
ENV DEBIAN_FRONTEND noninteractive
ENV INITRD No

LABEL Name="Ubuntu for CRE" \
      CRE=$CRE_VERSION \ 
      Year=$BUILD_YEAR \
      Month=$BUILD_MONTH \
      Version=$UBUNTU_VERSION \
      OS="Ubuntu:$UBUNTU_VERSION" \
      Build_=$BUILD_TAG 

# Install.
RUN apt-get update && apt-get install -y locales && rm -rf /var/lib/apt/lists/* \
    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8

RUN \
  sed -i 's/# \(.*multiverse$\)/\1/g' /etc/apt/sources.list && \
  apt-get update && \
  apt-get -y upgrade && \
  apt-get install -y apt-transport-https build-essential g++ gcc inotify-tools locales libc-dev make software-properties-common swig expect && \
  apt-get install -y util-linux rename jq amqp-tools apcalc bash && \
  apt-get install -y bc byobu curl git htop zlib1g logrotate man pwgen ssmtp sudo rsync unzip vim wget xvfb zip && \
  apt-get install -y gnupg hashcash libssh2-1 openssl openssh-server openssh-client ufw && \
  apt-get install -y libhdf5-serial-dev libpcre2-dev libbz2-dev zlib1g-dev liblzma-dev libicu-dev libgbm1 && \
  rm -rf /var/lib/apt/lists/*

#RUN apt-get install -y --reinstall pkg-config cmake-data
#RUN apt-get -y install pkgconf
RUN apt-get update && \
    apt-get -y upgrade && \
    apt-cache search pkg-config && \
    apt-get install -y pkg-config
#apt-get update -y && apt-get install meson cmake fuse3 libfuse3-dev libglib2.0-dev pkg-config python3-dev -y

# https://wiki.ubuntuusers.de/jq/
# https://wlanboy.com/tutorial/rabbitmq-bash/
# libzip4  ->  php-zip ???

RUN locale-gen en_US en_US.UTF-8 && \ 
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

#Add Java JDK
RUN apt-get update && \
    apt-get install --no-install-recommends -y openjdk-$JAVA_VERSION-jre && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
ENV JAVA_HOME /usr/lib/jvm/java-$JAVA_VERSION-openjdk-amd64/
RUN export JAVA_HOME

#Add Python
RUN apt-get update && apt-get -y --no-install-recommends install python3 python3-setuptools python3-pip && apt-get clean 
RUN apt-get  -y --no-install-recommends install python3-numpy python3-matplotlib 
RUN pip3 install --upgrade pip 
RUN pip3 install wget
RUN pip3 install numpy==1.19 pandas==1.2 matplotlib==3.3
RUN pip3 install Flask
# https://github.com/bndr/pipreqs
RUN pip3 install pipreqs
#rabbitMQ
RUN pip3 install --upgrade pika
#python3-dev removed here
# modify yml files: 
RUN pip3 install pyyaml
# Handle csv meta data csv for web
# https://pypi.org/project/csvw/
# https://csvw.org/standards.html
RUN pip3 install csvw

# Freeze python requirements here:
RUN mkdir -p /cre && \ 
    pip3 freeze --no-cache-dir > /cre/requirements.txt.orig

RUN mkdir -p /cre && touch /cre/versions.txt && \
    echo "$(date +'%F %R') \tcreBuild \t $(date +'%Y.%m')" >> /cre/versions.txt && \
    echo "$(date +'%F %R') \t creUbuntu \t $(cat /usr/lib/os-release | grep PRETTY | sed -e "s/^PRETTY_NAME=\"Ubuntu //" -e "s/\"$//")" >> /cre/versions.txt && \
    echo "$(date +'%F %R') \t  UbuntuName \t $(lsb_release -cs)" >> /cre/versions.txt && \
    echo "$(date +'%F %R') \t  $(openssl version)" >> /cre/versions.txt && \
    echo "$(date +'%F %R') \t  Java \t $(java -version 2>&1 | grep version)" >> /cre/versions.txt && \  
    echo "$(date +'%F %R') \t  Python3 \t $(python3 --version)" >> /cre/versions.txt && \ 
    echo "$(date +'%F %R') \t   numpy \t $(python3 -c 'import numpy; print(numpy.__version__)')" >> /cre/versions.txt && \
    echo "$(date +'%F %R') \t   pandas \t $(python3 -c 'import pandas; print(pandas.__version__)')" >> /cre/versions.txt && \
    echo "$(date +'%F %R') \t   Flask \t $(python3 -m flask --version | grep Flask)" >> /cre/versions.txt


COPY cre/ /cre/
# Copy shoremen to handle Procfile (Process Managment)
COPY /cre/shoreman.sh /usr/local/bin/shoreman
RUN chmod 755 /usr/local/bin/shoreman

#apt-get autoremove
#apt-get clean
RUN dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n

# Define mountable directories.
VOLUME ["/cre/python"]

# Set environment variables.
ENV HOME /cre

# Define working directory.
WORKDIR /cre

ENTRYPOINT ["/cre/ubuntu-entrypoint.sh"]
CMD ["shoreman", "/cre/ubuntu-procfile"]

